[
    {
        "id": "faad42cc6fc6b0b1",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "15b93a2e7e9bc468",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4eb19755713fcfbb",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "efd6aa78549913eb",
        "type": "subflow",
        "name": "Ping",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 140,
                "wires": [
                    {
                        "id": "3bd9cde1f8d14411"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 990,
                "y": 140,
                "wires": [
                    {
                        "id": "7bd712de6e2c3d46",
                        "port": 0
                    }
                ]
            },
            {
                "x": 990,
                "y": 200,
                "wires": [
                    {
                        "id": "6d080fc3cda7a021",
                        "port": 0
                    }
                ]
            },
            {
                "x": 990,
                "y": 260,
                "wires": [
                    {
                        "id": "6d080fc3cda7a021",
                        "port": 1
                    }
                ]
            },
            {
                "x": 990,
                "y": 320,
                "wires": [
                    {
                        "id": "6d080fc3cda7a021",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "counter",
                "type": "num",
                "value": "5"
            },
            {
                "name": "timeout",
                "type": "num",
                "value": "10"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "outputLabels": [
            "result",
            "stdout",
            "stderr",
            "code"
        ],
        "icon": "node-red/bridge.svg",
        "status": {
            "x": 500,
            "y": 480,
            "wires": [
                {
                    "id": "19e8fc956cb51f1c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a83931916cd00b3c",
        "type": "group",
        "z": "faad42cc6fc6b0b1",
        "name": "Save Current Device",
        "style": {
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "51dd310d28cd7dd6",
            "fdaded522b2fba23",
            "996c90ea6287d742",
            "68c614379a993741",
            "e433b053373cf08b"
        ],
        "x": 1034,
        "y": 439,
        "w": 712,
        "h": 182
    },
    {
        "id": "4e13df872075159d",
        "type": "group",
        "z": "faad42cc6fc6b0b1",
        "name": "Logger",
        "style": {
            "label": true
        },
        "nodes": [
            "3e00ad732a96e376",
            "177de42851cabcea",
            "a14381b3d8468993"
        ],
        "x": 94,
        "y": 479,
        "w": 572,
        "h": 82
    },
    {
        "id": "26184e5082c3aa72",
        "type": "group",
        "z": "faad42cc6fc6b0b1",
        "name": "Device ping scanner",
        "style": {
            "label": true
        },
        "nodes": [
            "25e0b11be92244e0",
            "bd7cec7333f10830",
            "8f59e8d9de8b6fe8",
            "13751ebd7b88d80d",
            "de8537eba6a7c89a",
            "2e1cb18ab3160cc1",
            "2d2b8d08cb69958b",
            "9fea28ba1c604c3c",
            "df95025699ec5295",
            "3970a2e6b8a5986b",
            "1069d588e09d4a68",
            "344d80f536dcd575",
            "1615cd1efee3995b",
            "83f1059b39cae8fc",
            "ff6667a6ed37bc23",
            "b6e44fde862dc4c5",
            "abe872f0bf97ba3e",
            "71bb18e179c64cd8",
            "4203e1eaaa318f25",
            "d24e1adbbf5485ae"
        ],
        "x": 94,
        "y": 699,
        "w": 1612,
        "h": 522
    },
    {
        "id": "65a05b24105db79a",
        "type": "junction",
        "z": "faad42cc6fc6b0b1",
        "x": 360,
        "y": 240,
        "wires": [
            [
                "4540a2304b232d99"
            ]
        ]
    },
    {
        "id": "0619ba9b2b7dae89",
        "type": "junction",
        "z": "faad42cc6fc6b0b1",
        "x": 360,
        "y": 300,
        "wires": [
            [
                "8efd4880f6d978fe"
            ]
        ]
    },
    {
        "id": "8f59e8d9de8b6fe8",
        "type": "junction",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "x": 940,
        "y": 820,
        "wires": [
            [
                "3970a2e6b8a5986b",
                "1069d588e09d4a68"
            ]
        ]
    },
    {
        "id": "1615cd1efee3995b",
        "type": "junction",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "x": 1160,
        "y": 820,
        "wires": [
            [
                "ff6667a6ed37bc23"
            ]
        ]
    },
    {
        "id": "13751ebd7b88d80d",
        "type": "junction",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "x": 940,
        "y": 1180,
        "wires": [
            [
                "1069d588e09d4a68"
            ]
        ]
    },
    {
        "id": "869d37d4e70a41de",
        "type": "influxdb",
        "hostname": "influxdb2",
        "port": 8086,
        "protocol": "http",
        "database": "fms-tracker",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb2:8086",
        "timeout": 10,
        "rejectUnauthorized": false
    },
    {
        "id": "6d080fc3cda7a021",
        "type": "exec",
        "z": "efd6aa78549913eb",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "7bd712de6e2c3d46"
            ],
            [
                "076fe0cf783d83db"
            ],
            []
        ]
    },
    {
        "id": "3bd9cde1f8d14411",
        "type": "template",
        "z": "efd6aa78549913eb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "ping -c {{env.counter}} -t {{env.timeout}} {{payload}}",
        "output": "str",
        "x": 380,
        "y": 160,
        "wires": [
            [
                "6d080fc3cda7a021"
            ]
        ]
    },
    {
        "id": "7bd712de6e2c3d46",
        "type": "function",
        "z": "efd6aa78549913eb",
        "name": "function 1",
        "func": "msg.payload = parsePingOutput(msg.payload);\n\nreturn msg;\n\n\nfunction parsePingOutput(pingOutput) {\n    const result = {};\n\n    // Parse the host and IP address\n    const hostMatch = pingOutput.match(/PING (.+) \\(([\\d.]+)\\)/);\n    if (hostMatch) {\n        result.host = hostMatch[1];\n        result.ip = hostMatch[2];\n    }\n\n    // Parse responses\n    const responseRegex = /(\\d+) bytes from ([\\d.]+): icmp_seq=(\\d+) ttl=(\\d+) time=([\\d.]+) ms/g;\n    result.responses = [];\n    let responseMatch;\n    while ((responseMatch = responseRegex.exec(pingOutput)) !== null) {\n        result.responses.push({\n            bytes: parseInt(responseMatch[1], 10),\n            ip: responseMatch[2],\n            icmp_seq: parseInt(responseMatch[3], 10),\n            ttl: parseInt(responseMatch[4], 10),\n            time_ms: parseFloat(responseMatch[5])\n        });\n    }\n\n    // Parse packet statistics\n    const statsMatch = pingOutput.match(/(\\d+) packets transmitted, (\\d+) received, (\\d+)% packet loss/);\n    if (statsMatch) {\n        result.statistics = {\n            packets_transmitted: parseInt(statsMatch[1], 10),\n            packets_received: parseInt(statsMatch[2], 10),\n            packet_loss: parseInt(statsMatch[3], 10)\n        };\n    }\n\n    // Parse RTT statistics\n    const rttMatch = pingOutput.match(/rtt min\\/avg\\/max\\/mdev = ([\\d.]+)\\/([\\d.]+)\\/([\\d.]+)\\/([\\d.]+) ms/);\n    if (rttMatch) {\n        result.rtt = {\n            min: parseFloat(rttMatch[1]),\n            avg: parseFloat(rttMatch[2]),\n            max: parseFloat(rttMatch[3]),\n            mdev: parseFloat(rttMatch[4])\n        };\n    }\n\n    return result;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "076fe0cf783d83db",
        "type": "function",
        "z": "efd6aa78549913eb",
        "name": "function 2",
        "func": "msg.payload = parsePingOutput(msg.payload);\n\nreturn msg;\n\nfunction parsePingOutput(pingOutput) {\n    const result = {};\n\n    // Parse the host and IP address\n    const hostMatch = pingOutput.match(/PING (.+) \\(([\\d.]+)\\)/);\n    if (hostMatch) {\n        result.host = hostMatch[1];\n        result.ip = hostMatch[2];\n    }\n\n    // Parse packet statistics\n    const statsMatch = pingOutput.match(/(\\d+) packets transmitted, (\\d+) received, (\\d+)% packet loss/);\n    if (statsMatch) {\n        result.statistics = {\n            packets_transmitted: parseInt(statsMatch[1], 10),\n            packets_received: parseInt(statsMatch[2], 10),\n            packet_loss: parseInt(statsMatch[3], 10)\n        };\n    }\n\n    // Add a condition to handle cases with no responses\n    if (result.statistics && result.statistics.packets_received === 0) {\n        result.error = \"No response received. Possible network issue or host unreachable.\";\n    }\n\n    return result;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "19e8fc956cb51f1c",
        "type": "status",
        "z": "efd6aa78549913eb",
        "name": "",
        "scope": null,
        "x": 340,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c4ff55a18c9d3029",
        "type": "http in",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "url": "/fms-tracker",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "65a05b24105db79a",
                "0619ba9b2b7dae89"
            ]
        ]
    },
    {
        "id": "0e2a0fcbfcd9fe43",
        "type": "http in",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "url": "/delayed-tracker",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "6e6d43858b477869",
                "0619ba9b2b7dae89"
            ]
        ]
    },
    {
        "id": "973b159a1941bb33",
        "type": "http response",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "0fde4ad6c33c2272",
        "type": "function",
        "z": "faad42cc6fc6b0b1",
        "name": "http response",
        "func": "msg.payload = {\n    message: \"OK\",\n    status: 200\n};\n\nmsg.statusCode = 201;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 300,
        "wires": [
            [
                "973b159a1941bb33"
            ]
        ]
    },
    {
        "id": "7e45f2944f2cf244",
        "type": "debug",
        "z": "faad42cc6fc6b0b1",
        "name": "debug: telemetry data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 80,
        "wires": []
    },
    {
        "id": "30b5420fb48262d9",
        "type": "influxdb out",
        "z": "faad42cc6fc6b0b1",
        "influxdb": "869d37d4e70a41de",
        "name": "",
        "measurement": "gpsd",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "d86acb81503d3b7b",
        "bucket": "fms-tracker",
        "x": 890,
        "y": 160,
        "wires": []
    },
    {
        "id": "31b0e94691717b1b",
        "type": "function",
        "z": "faad42cc6fc6b0b1",
        "name": "parser",
        "func": "\n\nconst data = [\n    {\n        ..._.pick(msg.payload, [\n            \"lon\", \"lat\",\n            \"alt\", \"temp\", \"ip\"\n        ]),\n        track: _.get(msg.payload, \"track\"),\n        mag_track: _.get(msg.payload, \"magtrack\"),\n        mag_var: _.get(msg.payload, \"magvar\"),\n        speed: _.get(msg.payload, \"speed\") * 3.6,\n        time: moment(_.get(msg.payload, \"time\")).toDate(),\n        // timestamp: _.get(msg.payload, \"time\"),\n        realtime_status: _.get(msg, \"delayed\") ? 1: 0\n    },\n    {\n        device_host: _.get(msg.payload, \"hostname\"),\n        device_ip: _.get(msg.payload, \"ip\"),\n        device_mac: _.get(msg.payload, \"mac\"),\n        equipment_id: _.get(msg.payload, \"equipment_id\"),\n        equipment_name: _.get(msg.payload, \"equipment_id\"),\n        equipment_category: _.get(msg.payload, \"equipment_category\"),\n        realtime_status: _.get(msg, \"delayed\") ? \"delayed\": \"realtime\"\n    }\n];\n\nmsg.raw = msg.payload;\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "30b5420fb48262d9",
                "7e45f2944f2cf244",
                "4fb785462d7cb7c6"
            ]
        ]
    },
    {
        "id": "6e6d43858b477869",
        "type": "split",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload.data",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "ea0e67b6db692b50"
            ]
        ]
    },
    {
        "id": "ea0e67b6db692b50",
        "type": "change",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delayed",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 300,
        "wires": [
            [
                "65a05b24105db79a"
            ]
        ]
    },
    {
        "id": "51dd310d28cd7dd6",
        "type": "file",
        "z": "faad42cc6fc6b0b1",
        "g": "a83931916cd00b3c",
        "name": "",
        "filename": "/data/devices.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1330,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "fdaded522b2fba23",
        "type": "file in",
        "z": "faad42cc6fc6b0b1",
        "g": "a83931916cd00b3c",
        "name": "",
        "filename": "/data/devices.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1330,
        "y": 480,
        "wires": [
            [
                "996c90ea6287d742",
                "68c614379a993741"
            ]
        ]
    },
    {
        "id": "996c90ea6287d742",
        "type": "function",
        "z": "faad42cc6fc6b0b1",
        "g": "a83931916cd00b3c",
        "name": "function 3",
        "func": "const raw = msg.raw;\nlet devices = {}; \n\ntry {\n  devices = JSON.parse(msg.payload);\n} catch(err) { }\n\nconst data = raw[1];\nconst id = _.get(data, \"device_host\");\n\nmsg.payload = {\n    ...devices,\n    [id]: {\n        ..._.omit(data, [\"device_id\"]),\n        last_ip: _.get(data, \"device_ip\")\n    }\n};\n\n// msg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 1300,
        "y": 540,
        "wires": [
            [
                "68c614379a993741",
                "51dd310d28cd7dd6"
            ]
        ]
    },
    {
        "id": "68c614379a993741",
        "type": "debug",
        "z": "faad42cc6fc6b0b1",
        "g": "a83931916cd00b3c",
        "name": "debug: save current device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 540,
        "wires": []
    },
    {
        "id": "e433b053373cf08b",
        "type": "change",
        "z": "faad42cc6fc6b0b1",
        "g": "a83931916cd00b3c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "raw",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 480,
        "wires": [
            [
                "fdaded522b2fba23"
            ]
        ]
    },
    {
        "id": "d24e1adbbf5485ae",
        "type": "inject",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "interval 30s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 740,
        "wires": [
            [
                "4203e1eaaa318f25"
            ]
        ]
    },
    {
        "id": "4203e1eaaa318f25",
        "type": "file in",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "filename": "/data/devices.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 430,
        "y": 740,
        "wires": [
            [
                "b6e44fde862dc4c5"
            ]
        ]
    },
    {
        "id": "b6e44fde862dc4c5",
        "type": "function",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "parse",
        "func": "const raw = msg.raw;\nlet devices = JSON.parse(msg.payload);\n\nmsg.devices = devices;\nmsg.payload = Object.entries(devices).map(([key, value])=> {\n    return value;\n});\n\n// msg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 610,
        "y": 740,
        "wires": [
            [
                "83f1059b39cae8fc"
            ]
        ]
    },
    {
        "id": "abe872f0bf97ba3e",
        "type": "debug",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 760,
        "wires": []
    },
    {
        "id": "bd7cec7333f10830",
        "type": "Load Balance",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "defaultcapacity": 100,
        "dynamic": "c4ff55a18c9d3029",
        "hashType": "pearson",
        "mps": "",
        "name": "",
        "noavailability": "discard",
        "nocapacity": "admin",
        "outputs": 6,
        "routes": "5",
        "selection": "next",
        "sourceProperty": "msg.topic",
        "sticky": "",
        "x": 580,
        "y": 860,
        "wires": [
            [],
            [
                "2e1cb18ab3160cc1"
            ],
            [
                "25e0b11be92244e0"
            ],
            [
                "2d2b8d08cb69958b"
            ],
            [
                "9fea28ba1c604c3c"
            ],
            [
                "df95025699ec5295"
            ]
        ]
    },
    {
        "id": "2e1cb18ab3160cc1",
        "type": "subflow:efd6aa78549913eb",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "x": 810,
        "y": 840,
        "wires": [
            [
                "8f59e8d9de8b6fe8"
            ],
            [],
            [
                "13751ebd7b88d80d"
            ],
            [
                "13751ebd7b88d80d"
            ]
        ]
    },
    {
        "id": "25e0b11be92244e0",
        "type": "subflow:efd6aa78549913eb",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "x": 810,
        "y": 920,
        "wires": [
            [
                "8f59e8d9de8b6fe8"
            ],
            [],
            [
                "13751ebd7b88d80d"
            ],
            [
                "13751ebd7b88d80d"
            ]
        ]
    },
    {
        "id": "2d2b8d08cb69958b",
        "type": "subflow:efd6aa78549913eb",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "8f59e8d9de8b6fe8"
            ],
            [],
            [
                "13751ebd7b88d80d"
            ],
            [
                "13751ebd7b88d80d"
            ]
        ]
    },
    {
        "id": "9fea28ba1c604c3c",
        "type": "subflow:efd6aa78549913eb",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "x": 810,
        "y": 1080,
        "wires": [
            [
                "8f59e8d9de8b6fe8"
            ],
            [],
            [
                "13751ebd7b88d80d"
            ],
            [
                "13751ebd7b88d80d"
            ]
        ]
    },
    {
        "id": "df95025699ec5295",
        "type": "subflow:efd6aa78549913eb",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "x": 810,
        "y": 1160,
        "wires": [
            [
                "8f59e8d9de8b6fe8"
            ],
            [],
            [
                "13751ebd7b88d80d"
            ],
            [
                "13751ebd7b88d80d"
            ]
        ]
    },
    {
        "id": "de8537eba6a7c89a",
        "type": "delay",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 860,
        "wires": [
            [
                "bd7cec7333f10830"
            ]
        ]
    },
    {
        "id": "71bb18e179c64cd8",
        "type": "influxdb out",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "influxdb": "869d37d4e70a41de",
        "name": "",
        "measurement": "net-ping",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "d86acb81503d3b7b",
        "bucket": "fms-tracker",
        "x": 1540,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ff6667a6ed37bc23",
        "type": "function",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "parse",
        "func": "const raw = msg.raw;\nconst data = msg.payload;\n// msg.payload = Object.entries(devices).map(([key, value])=> {\n//     return value.last_ip;\n// });\n\nmsg.payload = [\n    {\n        ip: raw.last_ip,\n        ping: data.rtt.avg\n    },\n    {\n        ..._.omit(raw, [\"realtime_status\", \"last_ip\"]),\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 1290,
        "y": 1000,
        "wires": [
            [
                "abe872f0bf97ba3e",
                "71bb18e179c64cd8"
            ]
        ]
    },
    {
        "id": "83f1059b39cae8fc",
        "type": "split",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 190,
        "y": 820,
        "wires": [
            [
                "344d80f536dcd575"
            ]
        ]
    },
    {
        "id": "344d80f536dcd575",
        "type": "change",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "raw",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.last_ip",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "raw.device_host",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 860,
        "wires": [
            [
                "de8537eba6a7c89a"
            ]
        ]
    },
    {
        "id": "4fb785462d7cb7c6",
        "type": "change",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "path",
                "pt": "msg",
                "to": "req.url",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload[1].device_host",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "b7776ad5c6ae01f4"
            ]
        ]
    },
    {
        "id": "b7776ad5c6ae01f4",
        "type": "switch",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "property": "path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/fms-tracker",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "e63024bb30cb5c63"
            ]
        ]
    },
    {
        "id": "e63024bb30cb5c63",
        "type": "delay",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "pauseType": "queue",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 320,
        "wires": [
            [
                "e433b053373cf08b"
            ]
        ]
    },
    {
        "id": "3970a2e6b8a5986b",
        "type": "switch",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "rtt",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 820,
        "wires": [
            [
                "1615cd1efee3995b"
            ]
        ]
    },
    {
        "id": "1069d588e09d4a68",
        "type": "debug",
        "z": "faad42cc6fc6b0b1",
        "g": "26184e5082c3aa72",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8efd4880f6d978fe",
        "type": "delay",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 300,
        "wires": [
            [
                "0fde4ad6c33c2272"
            ]
        ]
    },
    {
        "id": "4540a2304b232d99",
        "type": "delay",
        "z": "faad42cc6fc6b0b1",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 200,
        "wires": [
            [
                "31b0e94691717b1b"
            ]
        ]
    },
    {
        "id": "3e00ad732a96e376",
        "type": "catch",
        "z": "faad42cc6fc6b0b1",
        "g": "4e13df872075159d",
        "name": "",
        "scope": [
            "30b5420fb48262d9",
            "71bb18e179c64cd8"
        ],
        "uncaught": false,
        "x": 170,
        "y": 520,
        "wires": [
            [
                "a14381b3d8468993"
            ]
        ]
    },
    {
        "id": "177de42851cabcea",
        "type": "file",
        "z": "faad42cc6fc6b0b1",
        "g": "4e13df872075159d",
        "name": "Log File",
        "filename": "targetPath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 580,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a14381b3d8468993",
        "type": "function",
        "z": "faad42cc6fc6b0b1",
        "g": "4e13df872075159d",
        "name": "Define Target Log File",
        "func": "msg.targetPath = `/data/logger/${moment().format(\"YYYY_MM_DD\")}-log.txt`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "177de42851cabcea"
            ]
        ]
    },
    {
        "id": "423d82d09d402e11",
        "type": "Prometheus Exporter",
        "z": "faad42cc6fc6b0b1",
        "name": "Prometheus",
        "endpoint": "/metrics",
        "port": 1881,
        "serviceName": "Node-RED",
        "instrumentName": "http_request_duration",
        "x": 170,
        "y": 100,
        "wires": []
    },
    {
        "id": "0ffcb4ec05fda33c",
        "type": "debug",
        "z": "15b93a2e7e9bc468",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 140,
        "wires": []
    },
    {
        "id": "13b0e92f5339fe7a",
        "type": "inject",
        "z": "15b93a2e7e9bc468",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "172.16.0.183",
        "payloadType": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "3fdd5e230b634d4d"
            ]
        ]
    },
    {
        "id": "3fdd5e230b634d4d",
        "type": "subflow:efd6aa78549913eb",
        "z": "15b93a2e7e9bc468",
        "name": "",
        "x": 410,
        "y": 240,
        "wires": [
            [
                "0ffcb4ec05fda33c"
            ],
            [
                "0ffcb4ec05fda33c"
            ],
            [],
            []
        ]
    }
]